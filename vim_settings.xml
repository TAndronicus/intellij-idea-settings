<application>
  <component name="VimEditorSettings">
    <editor />
  </component>
  <component name="VimHistorySettings">
    <history>
      <history-search>
        <entry encoding="base64">XDw7XD4=</entry>
        <entry encoding="base64">XDwpXD4=</entry>
        <entry encoding="base64">XDwiXD4=</entry>
        <entry encoding="base64">XDxwYWNrYWdlXD4=</entry>
        <entry encoding="base64">XDwyXD4=</entry>
        <entry encoding="base64">XDxTRVRcPg==</entry>
      </history-search>
      <history-cmd>
        <entry>sort n</entry>
        <entry>g/abrechnung/d</entry>
        <entry>g/abrechnung/dd</entry>
        <entry>678</entry>
        <entry>441</entry>
        <entry>727</entry>
        <entry>282</entry>
        <entry>so ~/.ideavimrc</entry>
        <entry>! ls</entry>
        <entry>63</entry>
        <entry>279</entry>
        <entry>165</entry>
        <entry>242</entry>
        <entry>432</entry>
        <entry>532</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
  </component>
  <component name="VimKeySettings">
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed L</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed K</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>shift ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed J</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
  <component name="VimMarksSettings">
    <globalmarks />
    <filemarks>
      <file name="$APPLICATION_CONFIG_DIR$/consoles/db/ff9d9af5-1c61-4ffc-b106-10ec42cfdc2d/console.sql" timestamp="1593760131206">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Workspace/qivalo/copy/kundenportal/dcgy/src/main/java/com/qivalo/portal/core/service/DiscovergyOverdueService.java" timestamp="1593769887923">
        <mark key="'" line="222" column="4" />
        <mark key="[" line="222" column="5" />
        <mark key="]" line="222" column="40" />
        <mark key="^" line="222" column="40" />
        <mark key="." line="222" column="39" />
      </file>
      <file name="$USER_HOME$/Workspace/qivalo/kundenportal/scripts/sql-scripts/index_stats.sql" timestamp="1593760375775">
        <mark key="[" line="31" column="14" />
        <mark key="]" line="55" column="44" />
        <mark key="." line="55" column="43" />
        <mark key="^" line="55" column="44" />
      </file>
      <file name="$USER_HOME$/Workspace/qivalo/kundenportal/scripts/sql-scripts/current_tasks.sql" timestamp="1593751446695">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="16" column="28" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Workspace/qivalo/kundenportal/scripts/sql-scripts/number_of_indexes.sql" timestamp="1593759854351">
        <mark key="[" line="5" column="27" />
        <mark key="]" line="6" column="0" />
        <mark key="." line="5" column="27" />
        <mark key="^" line="6" column="0" />
      </file>
      <file name="$USER_HOME$/Workspace/qivalo/kundenportal/scripts/sql-scripts/top_10_tables.sql" timestamp="1593752625546">
        <mark key="[" line="5" column="8" />
        <mark key="]" line="5" column="8" />
        <mark key="." line="5" column="8" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/consoles/db/5bc4bdf8-f09c-4b3f-b5dc-1cf29a29d6ef/console.sql" timestamp="1593760397322">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="31" column="14" />
        <mark key="]" line="31" column="13" />
        <mark key="." line="9" column="13" />
        <mark key="^" line="9" column="14" />
      </file>
      <file name="$USER_HOME$/Workspace/qivalo/kundenportal/scripts/sql-scripts/benchmarking_script.sql" timestamp="1593752267050">
        <mark key="[" line="58" column="27" />
        <mark key="]" line="60" column="45" />
        <mark key="." line="60" column="44" />
        <mark key="^" line="60" column="45" />
      </file>
      <file name="$USER_HOME$/Workspace/qivalo/kundenportal/scripts/sql-scripts/aktive_geraete_2019.sql" timestamp="1593750417728">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="52" column="27" />
        <mark key="^" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Workspace/qivalo/kundenportal/common/src/main/resources/db/repeatable/R__4.0.1_create_heizkostenverteiler_verbrauch.sql" timestamp="1593750089512">
        <mark key="[" line="27" column="56" />
        <mark key="]" line="36" column="18" />
      </file>
      <file name="/console" timestamp="1593761299818">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Workspace/qivalo/kundenportal/scripts/sql-scripts/fast_table_row_count.sql" timestamp="1593758236936">
        <mark key="[" line="2" column="182" />
        <mark key="]" line="4" column="0" />
        <mark key="." line="2" column="182" />
        <mark key="^" line="4" column="0" />
      </file>
      <file name="$USER_HOME$/Workspace/qivalo/copy/kundenportal/dcgy/src/test/java/com/qivalo/portal/core/service/DiscovergyOverdueFortnightTest.java" timestamp="1593768387613">
        <mark key="[" line="219" column="16" />
        <mark key="]" line="220" column="21" />
        <mark key="^" line="220" column="21" />
        <mark key="." line="220" column="20" />
      </file>
      <file name="/Dummy.txt" timestamp="1593767833403">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="26" />
        <mark key="." line="0" column="26" />
      </file>
      <file name="$USER_HOME$/Workspace/qivalo/copy/kundenportal/int-common/src/main/java/com/qivalo/portal/common/service/RapportConstants.java" timestamp="1593768562249">
        <mark key="[" line="27" column="123" />
        <mark key="]" line="27" column="123" />
        <mark key="." line="27" column="123" />
      </file>
      <file name="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/java/com/qivalo/portal/lock/dao/CommonGeraetLockRepository.java" timestamp="1593770053571">
        <mark key="'" line="14" column="17" />
        <mark key="[" line="46" column="60" />
        <mark key="]" line="47" column="52" />
        <mark key="." line="47" column="51" />
        <mark key="^" line="47" column="52" />
      </file>
      <file name="$USER_HOME$/Workspace/qivalo/kundenportal/scripts/sql-scripts/duplicated_indexes.sql" timestamp="1593760457131">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="21" column="55" />
        <mark key="]" line="22" column="0" />
        <mark key="." line="21" column="55" />
        <mark key="^" line="22" column="0" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/consoles/db/52e91b0e-f1e4-46da-a46a-d0d2f39f1c1c/console.sql" timestamp="1593760072561">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="/fragment.java" timestamp="1593769962339">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="4327" column="46" filename="$APPLICATION_CONFIG_DIR$/consoles/db/52e91b0e-f1e4-46da-a46a-d0d2f39f1c1c/console.sql" />
      <jump line="35" column="13" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/core/src/main/java/com/qivalo/portal/geraet/rest/GeraetRestEndpoint.java" />
      <jump line="2" column="0" filename="$USER_HOME$/Workspace/qivalo/kundenportal/common/src/main/resources/db/migration/V422.0__add_dampf_to_messung_fg.sql" />
      <jump line="4" column="34" filename="$USER_HOME$/Workspace/qivalo/kundenportal/common/src/main/resources/db/migration/V422.0__add_dampf_to_messung_fg.sql" />
      <jump line="4026" column="56" filename="$APPLICATION_CONFIG_DIR$/consoles/db/52e91b0e-f1e4-46da-a46a-d0d2f39f1c1c/console.sql" />
      <jump line="0" column="0" filename="$USER_HOME$/Workspace/qivalo/kundenportal/common/src/main/resources/db/repeatable/R__ersatzwerte.sql" />
      <jump line="436" column="8" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/core/src/main/java/com/qivalo/portal/geraet/service/GeraetService.java" />
      <jump line="1154" column="19" filename="$APPLICATION_CONFIG_DIR$/consoles/db/ff9d9af5-1c61-4ffc-b106-10ec42cfdc2d/console.sql" />
      <jump line="29" column="13" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/java/com/qivalo/portal/messung/service/CommonMessungService.java" />
      <jump line="108" column="70" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/java/com/qivalo/portal/messung/service/CommonMessungService.java" />
      <jump line="112" column="34" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/java/com/qivalo/portal/messung/service/CommonMessungService.java" />
      <jump line="116" column="12" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/java/com/qivalo/portal/messung/service/CommonMessungService.java" />
      <jump line="119" column="4" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/dcgy/src/main/java/com/qivalo/portal/core/service/DiscovergyOverdueService.java" />
      <jump line="121" column="29" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/java/com/qivalo/portal/messung/service/CommonMessungService.java" />
      <jump line="107" column="8" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/dcgy/src/main/java/com/qivalo/portal/core/service/DiscovergyOverdueService.java" />
      <jump line="439" column="8" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/core/src/main/java/com/qivalo/portal/geraet/service/GeraetService.java" />
      <jump line="6" column="39" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/core/src/main/java/com/qivalo/portal/geraet/service/GeraetService.java" />
      <jump line="532" column="0" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/boot/src/test/java/com/qivalo/portal/geraet/rest/GeraetRestEndpointTest.java" />
      <jump line="515" column="17" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/boot/src/test/java/com/qivalo/portal/geraet/rest/GeraetRestEndpointTest.java" />
      <jump line="542" column="4" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/boot/src/test/java/com/qivalo/portal/geraet/rest/GeraetRestEndpointTest.java" />
      <jump line="4333" column="18" filename="$APPLICATION_CONFIG_DIR$/consoles/db/52e91b0e-f1e4-46da-a46a-d0d2f39f1c1c/console.sql" />
      <jump line="66" column="65" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/boot/src/test/java/com/qivalo/portal/geraet/rest/GeraetRestEndpointTest.java" />
      <jump line="548" column="4" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/boot/src/test/java/com/qivalo/portal/geraet/rest/GeraetRestEndpointTest.java" />
      <jump line="81" column="29" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/boot/src/test/java/com/qivalo/portal/geraet/rest/GeraetRestEndpointTest.java" />
      <jump line="447" column="8" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/core/src/main/java/com/qivalo/portal/geraet/service/GeraetService.java" />
      <jump line="133" column="77" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/core/src/main/java/com/qivalo/portal/geraet/service/GeraetService.java" />
      <jump line="115" column="0" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/core/src/main/java/com/qivalo/portal/geraet/service/GeraetService.java" />
      <jump line="126" column="8" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/java/com/qivalo/portal/messung/service/CommonMessungService.java" />
      <jump line="42" column="0" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/java/com/qivalo/portal/messung/service/CommonMessungService.java" />
      <jump line="415" column="0" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/java/com/qivalo/portal/messung/dao/CommonMessungCustomRepository.java" />
      <jump line="32" column="45" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/java/com/qivalo/portal/messung/dao/CommonMessungCustomRepository.java" />
      <jump line="1164" column="16" filename="$APPLICATION_CONFIG_DIR$/consoles/db/5bc4bdf8-f09c-4b3f-b5dc-1cf29a29d6ef/console.sql" />
      <jump line="63" column="49" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/batch/src/main/java/com/qivalo/portal/core/ersatzwerte/service/ErsatzwerteService.java" />
      <jump line="565" column="32" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/boot/src/test/java/com/qivalo/portal/geraet/rest/GeraetRestEndpointTest.java" />
      <jump line="1259" column="24" filename="$APPLICATION_CONFIG_DIR$/consoles/db/ff9d9af5-1c61-4ffc-b106-10ec42cfdc2d/console.sql" />
      <jump line="4334" column="16" filename="$APPLICATION_CONFIG_DIR$/consoles/db/52e91b0e-f1e4-46da-a46a-d0d2f39f1c1c/console.sql" />
      <jump line="184" column="33" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/core/src/main/java/com/qivalo/portal/geraet/rest/GeraetRestEndpoint.java" />
      <jump line="471" column="4" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/boot/src/test/java/com/qivalo/portal/geraet/rest/GeraetRestEndpointTest.java" />
      <jump line="217" column="18" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/dcgy/src/test/java/com/qivalo/portal/core/service/StromRueckstandDiscovergyUpdateServiceTest.java" />
      <jump line="0" column="0" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/geraet/geraet-details/geraet-details.component.html" />
      <jump line="38" column="4" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/geraet/geraet-logs-list/geraet-logs-list.component.ts" />
      <jump line="36" column="20" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/java/com/qivalo/portal/lock/dto/GeraetLockDTO.java" />
      <jump line="13" column="11" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/geraet/geraet-locks/geraet-locks.component.ts" />
      <jump line="161" column="10" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/nutzeinheitenUebersicht/nutzeinheiten-list/nutzeinheitenList.component.html" />
      <jump line="38" column="8" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/geraet/geraet-locks/geraet-locks.component.ts" />
      <jump line="20" column="31" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/geraet/geraet-locks/geraet-locks.component.ts" />
      <jump line="39" column="0" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/geraet/geraet-locks/geraet-locks.component.ts" />
      <jump line="21" column="40" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/geraet/geraet-locks/geraet-locks.component.ts" />
      <jump line="4" column="65" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/geraet/geraet-locks/geraet-locks.component.ts" />
      <jump line="51" column="10" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/shared/services/modal.service.ts" />
      <jump line="53" column="48" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/shared/services/modal.service.ts" />
      <jump line="23" column="4" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/shared/modals/geraet-lock-modal/geraet-lock-modal.component.ts" />
      <jump line="19" column="26" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/geraet/geraet-locks/geraet-locks.component.html" />
      <jump line="23" column="20" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/geraet/geraet-locks/geraet-locks.component.ts" />
      <jump line="18" column="17" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/core/src/main/java/com/qivalo/portal/geraet/dao/GeraetRepository.java" />
      <jump line="334" column="15" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/resources/db/repeatable/R__ersatzwerte.sql" />
      <jump line="39" column="0" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/boot/src/test/java/com/qivalo/portal/lock/service/CommonGeraetLockServiceTest.java" />
      <jump line="61" column="9" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/boot/src/test/java/com/qivalo/portal/lock/service/CommonGeraetLockServiceTest.java" />
      <jump line="29" column="23" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/resources/db/repeatable/R__vb_2_functions.sql" />
      <jump line="27" column="13" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/batch/src/main/java/com/qivalo/portal/core/ersatzwerte/dao/CustomErsatzwerteRepository.java" />
      <jump line="35" column="12" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/resources/db/repeatable/R__locks.sql" />
      <jump line="4366" column="0" filename="$APPLICATION_CONFIG_DIR$/consoles/db/52e91b0e-f1e4-46da-a46a-d0d2f39f1c1c/console.sql" />
      <jump line="47" column="13" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/core/src/main/java/com/qivalo/portal/geraet/rest/GeraetRestEndpoint.java" />
      <jump line="36" column="23" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/geraet/geraet-locks/geraet-locks.component.ts" />
      <jump line="32" column="41" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/shared/modals/geraet-lock-modal/geraet-lock-modal.component.ts" />
      <jump line="173" column="38" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/core/src/main/java/com/qivalo/portal/geraet/rest/GeraetRestEndpoint.java" />
      <jump line="188" column="4" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/core/src/main/java/com/qivalo/portal/geraet/rest/GeraetRestEndpoint.java" />
      <jump line="182" column="4" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/core/src/main/java/com/qivalo/portal/geraet/rest/GeraetRestEndpoint.java" />
      <jump line="58" column="16" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/geraet/geraet-locks/geraet-locks.component.ts" />
      <jump line="9" column="39" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/geraet/geraet-locks/geraet-locks.component.ts" />
      <jump line="1165" column="14" filename="$APPLICATION_CONFIG_DIR$/consoles/db/5bc4bdf8-f09c-4b3f-b5dc-1cf29a29d6ef/console.sql" />
      <jump line="30" column="13" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/boot/src/test/java/com/qivalo/portal/geraet/client/GeraetClient.java" />
      <jump line="104" column="49" filename="$USER_HOME$/Workspace/qivalo/kp-jooq/src/test/kotlin/jb/KpJooqApplicationTests.kt" />
      <jump line="1269" column="17" filename="$APPLICATION_CONFIG_DIR$/consoles/db/ff9d9af5-1c61-4ffc-b106-10ec42cfdc2d/console.sql" />
      <jump line="4321" column="66" filename="$APPLICATION_CONFIG_DIR$/consoles/db/52e91b0e-f1e4-46da-a46a-d0d2f39f1c1c/console.sql" />
      <jump line="486" column="0" filename="$USER_HOME$/Workspace/qivalo/kundenportal/batch/src/test/java/com/qivalo/portal/core/ersatzwerte/service/ErsatzwerteServiceTest.java" />
      <jump line="117" column="21" filename="$USER_HOME$/Workspace/qivalo/kundenportal/batch/src/test/java/com/qivalo/portal/core/ersatzwerte/service/ErsatzwerteServiceTest.java" />
      <jump line="503" column="0" filename="$USER_HOME$/Workspace/qivalo/kundenportal/batch/src/test/java/com/qivalo/portal/core/ersatzwerte/service/ErsatzwerteServiceTest.java" />
      <jump line="425" column="9" filename="$USER_HOME$/Workspace/qivalo/kundenportal/batch/src/test/java/com/qivalo/portal/core/ersatzwerte/service/ErsatzwerteServiceTest.java" />
      <jump line="102" column="9" filename="$USER_HOME$/Workspace/qivalo/kundenportal/batch/src/test/java/com/qivalo/portal/core/ersatzwerte/service/ErsatzwerteServiceTest.java" />
      <jump line="107" column="37" filename="$USER_HOME$/Workspace/qivalo/kundenportal/batch/src/test/java/com/qivalo/portal/core/ersatzwerte/service/ErsatzwerteServiceTest.java" />
      <jump line="99" column="4" filename="$USER_HOME$/Workspace/qivalo/kundenportal/batch/src/test/java/com/qivalo/portal/core/ersatzwerte/service/ErsatzwerteServiceTest.java" />
      <jump line="0" column="0" filename="$APPLICATION_CONFIG_DIR$/consoles/db/ff9d9af5-1c61-4ffc-b106-10ec42cfdc2d/console.sql" />
      <jump line="1181" column="13" filename="$APPLICATION_CONFIG_DIR$/consoles/db/5bc4bdf8-f09c-4b3f-b5dc-1cf29a29d6ef/console.sql" />
      <jump line="1287" column="0" filename="$APPLICATION_CONFIG_DIR$/consoles/db/ff9d9af5-1c61-4ffc-b106-10ec42cfdc2d/console.sql" />
      <jump line="1332" column="0" filename="$APPLICATION_CONFIG_DIR$/consoles/db/ff9d9af5-1c61-4ffc-b106-10ec42cfdc2d/console.sql" />
      <jump line="0" column="0" filename="$APPLICATION_CONFIG_DIR$/consoles/db/52e91b0e-f1e4-46da-a46a-d0d2f39f1c1c/console.sql" />
      <jump line="19" column="13" filename="$USER_HOME$/Workspace/qivalo/kundenportal/batch/src/main/java/com/qivalo/portal/core/messung/task/MessungValidationTask.java" />
      <jump line="36" column="21" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/frontend/src/app/shared/modals/geraet-lock-modal/geraet-lock-modal.component.ts" />
      <jump line="4417" column="57" filename="$APPLICATION_CONFIG_DIR$/consoles/db/52e91b0e-f1e4-46da-a46a-d0d2f39f1c1c/console.sql" />
      <jump line="14" column="17" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/java/com/qivalo/portal/lock/dao/CommonGeraetLockRepository.java" />
      <jump line="32" column="13" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/common/src/main/java/com/qivalo/portal/lock/service/CommonGeraetLockService.java" />
      <jump line="93" column="28" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/dcgy/src/main/java/com/qivalo/portal/core/service/DiscovergyStichtagUpdateService.java" />
      <jump line="32" column="26" filename="$USER_HOME$/Workspace/qivalo/kundenportal/scripts/sql-scripts/aktive_geraete_2019.sql" />
      <jump line="1190" column="0" filename="$APPLICATION_CONFIG_DIR$/consoles/db/5bc4bdf8-f09c-4b3f-b5dc-1cf29a29d6ef/console.sql" />
      <jump line="4480" column="46" filename="$APPLICATION_CONFIG_DIR$/consoles/db/52e91b0e-f1e4-46da-a46a-d0d2f39f1c1c/console.sql" />
      <jump line="9" column="0" filename="$APPLICATION_CONFIG_DIR$/consoles/db/52e91b0e-f1e4-46da-a46a-d0d2f39f1c1c/console.sql" />
      <jump line="0" column="0" filename="$APPLICATION_CONFIG_DIR$/consoles/db/5bc4bdf8-f09c-4b3f-b5dc-1cf29a29d6ef/console.sql" />
      <jump line="0" column="0" filename="$USER_HOME$/Workspace/qivalo/kundenportal/scripts/sql-scripts/duplicated_indexes.sql" />
      <jump line="221" column="4" filename="$USER_HOME$/Workspace/qivalo/copy/kundenportal/dcgy/src/main/java/com/qivalo/portal/core/service/DiscovergyOverdueService.java" />
    </jumps>
  </component>
  <component name="VimRegisterSettings">
    <registers>
      <register name="*" type="2">
        <text>commonGeraetLockService</text>
      </register>
      <register name="-" type="4">
        <text>(Abrechnungssperre)</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxTRVRcPg==</text>
      </register>
      <register name="0" type="4">
        <text>select t.schemaname,
       t.tablename,
       indexname,
       c.reltuples                                                                                                 as num_rows,
       pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)::text || '.' || quote_ident(t.tablename)::text))  as table_size,
       pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)::text || '.' || quote_ident(indexrelname)::text)) as index_size,
       case
           when indisunique then 'Y'
           else 'N'
           end                                                                                                     as is_unique,
       number_of_scans,
       tuples_read,
       tuples_fetched
from pg_tables t
         left outer join pg_class c on t.tablename = c.relname
         left outer join (
    select c.relname     as ctablename,
           ipg.relname   as indexname,
           x.indnatts    as number_of_columns,
           idx_scan      as number_of_scans,
           idx_tup_read  as tuples_read,
           idx_tup_fetch as tuples_fetched,
           indexrelname,
           indisunique,
           schemaname
    from pg_index x
             join pg_class c on c.oid = x.indrelid
             join pg_class ipg on ipg.oid = x.indexrelid
             join pg_stat_all_indexes psai on x.indexrelid = psai.indexrelid
) as foo on t.tablename = foo.ctablename and t.schemaname = foo.schemaname
where t.schemaname not in ('pg_catalog', 'information_schema')
order by 1, 2;</text>
      </register>
      <register name="1" type="2">
        <text>commonGeraetLockService</text>
      </register>
      <register name="q" type="4">
        <text />
      </register>
      <register name="2" type="2">
        <text>commonGeraetLockServicee</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">aW5zZXJ0IGludG8gZXdfcXVldWUgKGlkLCBnZXJfZ2VyYWV0X2lkLCBzdGFydF9kYXRlKQpzZWxlY3QgbmV4dHZhbCgnZXdfcXVldWVfc2VxJyksCiAgICAgICBnZy5pZCwKICAgICAgICcyMDE5LTAxLTAxJwpmcm9tIGdlcl9nZXJhZXQgZ2cKICAgICAgICAgaW5uZXIgam9pbiBna19nZXJhZXRfdHlwIGdndCBvbiBnZy5na19nZXJhZXRfdHlwX2lkID0gZ2d0LmlkCiAgICAgICAgIGlubmVyIGpvaW4gbnV0X251dHplaW5oZWl0IG5uIG9uIGdnLm51dF9udXR6ZWluaGVpdF9pZCA9IG5uLmlkCiAgICAgICAgIGlubmVyIGpvaW4gbGllX2xpZWdlbnNjaGFmdCBsbCBvbiBnZy5saWVfbGllZ2Vuc2NoYWZ0X2lkID0gbGwuaWQKICAgICAgICAgaW5uZXIgam9pbiBudXRfbWVzc3Byb2ZpbCBubSBvbiBubi5pZCA9IG5tLmlkX251dF9udXR6ZWluaGVpdF9pZAp3aGVyZSBnZXJhZXRfdHlwIGluICgnVycsICdLJywgJ0gnLCAnWicpCiAgYW5kIChsbC5yZW1vdmVkb24sIG5uLnJlbW92ZWRvbiwgZ2cucmVtb3ZlZG9uKSBpcyBudWxsCiAgYW5kIG5tLnByb2ZpbGVfdHlwZSA9ICdEJzsKCmluc2VydCBpbnRvIGV3X3F1ZXVlIChpZCwgZ2VyX2dlcmFldF9pZCwgc3RhcnRfZGF0ZSwgZW5kX2RhdGUpIC0tIGRvbmUKc2VsZWN0IG5leHR2YWwoJ2V3X3F1ZXVlX3NlcScpLAogICAgICAgZ2cuaWQsCiAgICAgICAnMjAxOS0wMS0xNScsCiAgICAgICAnMjAxOS0xMi0zMScKZnJvbSBnZXJfZ2VyYWV0IGdnCiAgICAgICAgIGlubmVyIGpvaW4gZ2tfZ2VyYWV0X3R5cCBnZ3Qgb24gZ2cuZ2tfZ2VyYWV0X3R5cF9pZCA9IGdndC5pZAogICAgICAgICBpbm5lciBqb2luIG51dF9udXR6ZWluaGVpdCBubiBvbiBnZy5udXRfbnV0emVpbmhlaXRfaWQgPSBubi5pZAogICAgICAgICBpbm5lciBqb2luIGxpZV9saWVnZW5zY2hhZnQgbGwgb24gZ2cubGllX2xpZWdlbnNjaGFmdF9pZCA9IGxsLmlkCndoZXJlIGdlcmFldF90eXAgPSAnSCcKICBhbmQgKGxsLnJlbW92ZWRvbiwgbm4ucmVtb3ZlZG9uLCBnZy5yZW1vdmVkb24pIGlzIG51bGw7CgppbnNlcnQgaW50byBld19xdWV1ZSAoaWQsIGdlcl9nZXJhZXRfaWQsIHN0YXJ0X2RhdGUpIC0tIGRvbmUKc2VsZWN0IG5leHR2YWwoJ2V3X3F1ZXVlX3NlcScpLAogICAgICAgZ2cuaWQsCiAgICAgICAnMjAyMC0wMS0xNScKZnJvbSBnZXJfZ2VyYWV0IGdnCiAgICAgICAgIGlubmVyIGpvaW4gZ2tfZ2VyYWV0X3R5cCBnZ3Qgb24gZ2cuZ2tfZ2VyYWV0X3R5cF9pZCA9IGdndC5pZAogICAgICAgICBpbm5lciBqb2luIG51dF9udXR6ZWluaGVpdCBubiBvbiBnZy5udXRfbnV0emVpbmhlaXRfaWQgPSBubi5pZAogICAgICAgICBpbm5lciBqb2luIGxpZV9saWVnZW5zY2hhZnQgbGwgb24gZ2cubGllX2xpZWdlbnNjaGFmdF9pZCA9IGxsLmlkCndoZXJlIGdlcmFldF90eXAgPSAnSCcKICBhbmQgKGxsLnJlbW92ZWRvbiwgbm4ucmVtb3ZlZG9uLCBnZy5yZW1vdmVkb24pIGlzIG51bGw7Cgo=</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">c2VsZWN0IGFhLmlkCmZyb20gbnV0X251dHplaW5oZWl0IGFhCndoZXJlIHJlbW92ZWRvbiBpcyBudWxsOwoKc2VsZWN0ICoKZnJvbSBsaWVfbGllZ2Vuc2NoYWZ0IGxsCldIRVJFIExMLmlkIElOCiAgICAgICgxOTUzNjQ3OCwgMjM3MzUwODEsIDIzNzUyNzc3LCAzMjU0MTMyLCAyMzg4Mjg4MiwgMzkwNTY2NywgMjM2NzY3MzEsIDIyNTUyNTI3LCAyMzg4Mjg4NSwgMTkwMTQ0MjgsIDE3NDk1MzE3LCAxNzQ5NTMxOCwgMTc0ODI5ODcsIDE3NDgyOTg5LCAxOTAxNDQyNywgMjM4ODM3OTEsIDIyNTUyNTI4LAogICAgICAgMjAwODMxODIsIDIwMzIzMjc3LCAxNzQ2OTA2OCwgMjAwODMxNzcsIDIwMzIyMzI3LCAyMDQ4NDQyOSwgMjAwODMxODMsIDIzODgyODgwLCAxODA5NzMyNCkKICBBTkQgcmVtb3ZlZG9uIElTIG5vdCBOVUxMOwoKc2VsZWN0ICoKZnJvbSBudXRfbnV0emVyIG5uOwoKc2VsZWN0IHN0YXR1cywgY29hbGVzY2UoZW5kX2RhdGUsIGN1cnJlbnRfdGltZXN0YW1wKSAtIHN0YXJ0X2RhdGUsICoKZnJvbSB0ZWNfam9iX2hpc3RvcmllIHRqaAp3aGVyZSBqb2JfaWQgfiAnZXJzYXR6JwpvcmRlciBieSBjcmVhdGlvbl9kYXRlIGRlc2M7CgpzZWxlY3QgY291bnQoKikKZnJvbSBld19xdWV1ZSBlcTsKCnNob3cgYWxsOwoKdXBkYXRlIHRlY19qb2JfaGlzdG9yaWUKc2V0IHN0YXR1cyA9ICdTJwp3aGVyZSBpZCA9IDE4MjY5MjE2OwoKc2VsZWN0ICoKZnJvbSB2Yl9nZXJhZXRfYWdncmVnYXRlIHZnYTsKCnNlbGVjdCAqCmZyb20gYWJyX3NjaGFldHphdWZ0ZWlsdW5nOwoKc2VsZWN0ICoKZnJvbSB2Yl9nZXJhZXRfYWdncmVnYXRlIHZnYTsKCnNlbGVjdCBjb3VudCgqKQpmcm9tIG1lc19zdHJvbXphZWhsZXIgbXM7CgpzZWxlY3QgcmVsbmFtZSwKICAgICAgIHJlbHR1cGxlcy0tIHN1bShyZWx0dXBsZXMpCmZyb20gcGdfY2xhc3MgcGMKd2hlcmUgcmVsbmFtZSBsaWtlICdtZXNfc3Ryb216YWVobGVyJXBrZXknCm9yZGVyIGJ5IHJlbG5hbWU7CgpyZWZyZXNoIG1hdGVyaWFsaXplZCB2aWV3IHZiX2RheV9jb25zdW1wdGlvbjsKCnNlbGVjdCBzdW0ocmVsdHVwbGVzKQpmcm9tIHBnX2NsYXNzIHBjCndoZXJlIHJlbG5hbWUgaW4gKCdtZXNfaGVpemtvc3RlbnZlcnRlaWxlcicsICdtZXNfa2FsdHdhc3NlcnphZWhsZXInLCAnbWVzX3dhcm13YXNzZXJ6YWVobGVyJywgJ21lc19zdHJvbXphZWhsZXInLCAnbWVzX3dhZXJtZW1lbmdlbnphZWhsZXInLCAnbWVzX2thZWx0ZW1lbmdlbnphZWhsZXInLCAnbWVzX2RhbXBmJyk7Cg==</text>
      </register>
      <register name=":" type="4">
        <text>532</text>
      </register>
    </registers>
  </component>
  <component name="VimSearchSettings">
    <search>
      <last-search encoding="base64">XDxTRVRcPg==</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxTRVRcPg==</last-pattern>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
  </component>
  <component name="VimSettings">
    <state version="6" enabled="true" />
    <notifications>
      <idea-join enabled="true" />
      <idea-put enabled="true" />
    </notifications>
  </component>
</application>